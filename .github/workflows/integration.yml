name: Build Docker Container on Push and PR
on:
  pull_request:
    types: [ opened, labeled, synchronize ]
    branches:
      - main 
      - dev
  workflow_dispatch:

permissions: read-all

jobs:
  test_docker:
    name: Build Container as Test
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Debug Information
        run: |-
          echo "Current Github workspace: $GITHUB_WORKSPACE"
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin@v3.3.0
      - name: Google Authentication
        uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d # v1
        id: auth
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GOOGLE_WORKLOAD_SERVICE_ACCOUNT }}'
      - name: .env.production -> Source
        run: |-
          cd "$GITHUB_WORKSPACE/src"
          touch .env.production
          echo "SECRET=${{ secrets.SECRET }}" | tee -a .env.production
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" | tee -a .env.production
          echo "GOOGLE_PROVIDER_CLIENT_ID=${{ secrets.GOOGLE_PROVIDER_CLIENT_ID }}" | tee -a .env.production
          echo "GOOGLE_PROVIDER_CLIENT_SECRET=${{ secrets.GOOGLE_PROVIDER_CLIENT_SECRET }}" | tee -a .env.production
          echo "GOOGLE_PROVIDER_AUTHORIZATION_URL=${{ secrets.GOOGLE_PROVIDER_AUTHORIZATION_URL }}" | tee -a .env.production
          echo "FIREBASE_SERVICE_ACCOUNT_PROJECT_ID=${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROJECT_ID }}" | tee -a .env.production
          echo "FIREBASE_SERVICE_ACCOUNT_PRIVATE_KEY=${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRIVATE_KEY }}" | tee -a .env.production
          echo "FIREBASE_SERVICE_ACCOUNT_CLIENT_EMAIL=${{ secrets.FIREBASE_SERVICE_ACCOUNT_CLIENT_EMAIL }}" | tee -a .env.production
          echo "Created .env.production to $GITHUB_WORKSPACE/src"
      - name: Source -> Docker Image
        run: |-
          DOCKER_BUILDKIT=1 docker build --target builder .
  run_linter:
    name: Linter + Commenter
    runs-on: ubuntu-latest
    permissions:
      pull-requests: 'write'
    defaults:
      run:
        working-directory: src

    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Node Dependencies
        run: npm ci

      - name: Run basic linter
        run: npm run lint

      - name: Save Code Linting Report to JSON
        # npm script for ESLint
        # eslint --output-file eslint_report.json --format json src
        # See https://eslint.org/docs/user-guide/command-line-interface#options
        run: npm run lint-output

      - name: Annotated linting code results
        uses: a-b-r-o-w-n/eslint-action@0c0983752a98ed6982252ebb9572d082c469a6de
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          files: "src/**/*"
          extensions: ".js"
          working-directory: "./src"
          quiet: "false"

      - name: Upload ESLint json Report
        uses: actions/upload-artifact@v2
        with:
          name: eslint_report.json
          path: eslint_report.json
